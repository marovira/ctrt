#include "@TILE_NAME@.hpp"

#include <tracer/image.hpp>
#include <tracer/scene.hpp>
#include <zeus/timer.hpp>
#include <fmt/printf.h>

constexpr std::size_t image_width{@IMAGE_WIDTH@};
constexpr std::size_t image_height{@IMAGE_HEIGHT@};
constexpr std::size_t tile_width{@TILE_WIDTH@};
constexpr std::size_t tile_height{@TILE_HEIGHT@};

constexpr Tile tile{@TILE_X_START@, @TILE_X_END@, @TILE_Y_START@, @TILE_Y_END@, @TILE_WIDTH@, @TILE_HEIGHT@};

#if defined(CTRT_RENDER_SCENE_1)
inline auto render_@TILE_NAME@_scene_1()
{
#    if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []() {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;

        Camera camera{Point{0.0f, 0.0f, 500.0f},
                      Vector{0.0f},
                      Vector{0.0f, 1.0f, 0.0f},
                      500.0f};

        std::array<Shapes, 0> shapes{};
        std::array<Lights, 0> lights{};
        std::array<Materials, 0> materials{};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              GradientBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  GradientBackground{}};
        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;
#    else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    Camera camera{Point{0.0f, 0.0f, 500.0f},
                  Vector{0.0f},
                  Vector{0.0f, 1.0f, 0.0f},
                  500.0f};

    std::array<Shapes, 0> shapes{};
    std::array<Lights, 0> lights{};
    std::array<Materials, 0> materials{};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          GradientBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              GradientBackground{}};
    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#    endif
}
#endif

#if defined(CTRT_RENDER_SCENE_2)
inline auto render_@TILE_NAME@_scene_2()
{
#    if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []() {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;
        Camera camera{Point{0.0f, 0.0f, 500.0f},
                      Vector{0.0f},
                      Vector{0.0f, 1.0f, 0.0f},
                      500.0f};

        Sphere s{Point{0.0f}, 150.0f};
        s.set_default_colour(Colour{1.0f, 0.0f, 0.0f});
        s.set_material_id(0);

        std::array<Shapes, 1> shapes{s};
        std::array<Lights, 1> lights{AmbientLight{}};
        std::array<Materials, 1> materials{EmptyMaterial{}};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              GradientBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  GradientBackground{}};
        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;

#    else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    Camera camera{Point{0.0f, 0.0f, 500.0f},
                  Vector{0.0f},
                  Vector{0.0f, 1.0f, 0.0f},
                  500.0f};

    Sphere s{Point{0.0f}, 150.0f};
    s.set_default_colour(Colour{1.0f, 0.0f, 0.0f});
    s.set_material_id(0);

    std::array<Shapes, 1> shapes{s};
    std::array<Lights, 1> lights{AmbientLight{}};
    std::array<Materials, 1> materials{EmptyMaterial{}};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          DefaultBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              DefaultBackground{}};
    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#    endif
}
#endif

#if defined(CTRT_RENDER_SCENE_3)
inline auto render_@TILE_NAME@_scene_3()
{
#    if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []() {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;
        Camera camera{Point{0.0f, 0.0f, 500.0f},
                      Vector{0.0f, 0.0f, 0.0f},
                      Vector{0.0f, 1.0f, 0.0f},
                      950.0f};

        AmbientLight ambient;
        ambient.set_radiance(1.0f);

        PointLight light;
        light.set_position(Point{100.0f, 60.0f, 50.0f});
        light.set_radiance(3.0f);
        light.set_casts_shadows(true);

        Matte yellow_matte;
        yellow_matte.set_ambient_reflection(0.25f);
        yellow_matte.set_diffuse_reflection(0.65f);
        yellow_matte.set_diffuse_colour(Colour{1.0f, 1.0f, 0.0f});

        Matte brown_matte;
        brown_matte.set_ambient_reflection(0.15f);
        brown_matte.set_diffuse_reflection(0.85f);
        brown_matte.set_diffuse_colour(Colour{0.71f, 0.4f, 0.16f});

        Matte green_matte;
        green_matte.set_ambient_reflection(0.15f);
        green_matte.set_diffuse_reflection(0.5f);
        green_matte.set_diffuse_colour(Colour{0.0f, 0.4f, 0.2f});

        Sphere yellow_sphere{Point{13.0f, -6.0f, 0.0f}, 35.0f};
        yellow_sphere.set_material_id(0);
        yellow_sphere.set_default_colour(Colour{1.0f, 1.0f, 0.0f});

        Sphere brown_sphere{Point{-32.0f, 13.0f, -45.0f}, 35.0f};
        brown_sphere.set_material_id(1);
        brown_sphere.set_default_colour(Colour{0.71f, 0.4f, 0.16f});

        Plane green_plane{Point{0.0f, 0.0f, -50.0f}, Vector{0.0f, 0.0f, 1.0f}};
        green_plane.set_material_id(2);
        green_plane.set_default_colour(Colour{0.0f, 0.4f, 0.2f});

        // Construct arrays.
        std::array<Lights, 2> lights{ambient, light};
        std::array<Matte, 3> materials{yellow_matte, brown_matte, green_matte};
        std::array<Shapes, 3> shapes{yellow_sphere, brown_sphere, green_plane};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              DefaultBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  DefaultBackground{}};
        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;
#    else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    Camera camera{Point{0.0f, 0.0f, 500.0f},
                  Vector{0.0f, 0.0f, 0.0f},
                  Vector{0.0f, 1.0f, 0.0f},
                  950.0f};

    AmbientLight ambient;
    ambient.set_radiance(1.0f);

    PointLight light;
    light.set_position(Point{100.0f, 60.0f, 50.0f});
    light.set_radiance(3.0f);
    light.set_casts_shadows(true);

    Matte yellow_matte;
    yellow_matte.set_ambient_reflection(0.25f);
    yellow_matte.set_diffuse_reflection(0.65f);
    yellow_matte.set_diffuse_colour(Colour{1.0f, 1.0f, 0.0f});

    Matte brown_matte;
    brown_matte.set_ambient_reflection(0.15f);
    brown_matte.set_diffuse_reflection(0.85f);
    brown_matte.set_diffuse_colour(Colour{0.71f, 0.4f, 0.16f});

    Matte green_matte;
    green_matte.set_ambient_reflection(0.15f);
    green_matte.set_diffuse_reflection(0.5f);
    green_matte.set_diffuse_colour(Colour{0.0f, 0.4f, 0.2f});

    Sphere yellow_sphere{Point{13.0f, -6.0f, 0.0f}, 35.0f};
    yellow_sphere.set_material_id(0);
    yellow_sphere.set_default_colour(Colour{1.0f, 1.0f, 0.0f});

    Sphere brown_sphere{Point{-32.0f, 13.0f, -45.0f}, 35.0f};
    brown_sphere.set_material_id(1);
    brown_sphere.set_default_colour(Colour{0.71f, 0.4f, 0.16f});

    Plane green_plane{Point{0.0f, 0.0f, -50.0f}, Vector{0.0f, 0.0f, 1.0f}};
    green_plane.set_material_id(2);
    green_plane.set_default_colour(Colour{0.0f, 0.4f, 0.2f});

    // Construct arrays.
    std::array<Lights, 2> lights{ambient, light};
    std::array<Matte, 3> materials{yellow_matte, brown_matte, green_matte};
    std::array<Shapes, 3> shapes{yellow_sphere, brown_sphere, green_plane};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          DefaultBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              DefaultBackground{}};
    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#    endif
}
#endif

#if defined(CTRT_RENDER_SCENE_4)
inline auto render_@TILE_NAME@_scene_4()
{
#    if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []() {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;

        // Lights.
        AmbientLight ambient;
        ambient.set_radiance(0.5f);
        ambient.set_colour(Colour{1.0f});

        PointLight light;
        light.set_colour(Colour{1.0f});
        light.set_radiance(2.0f);
        light.set_casts_shadows(true);
        light.set_position(Vector{15, 15, 2.5f});

        // Materials.
        Phong red_phong;
        red_phong.set_diffuse_reflection(0.75f);
        red_phong.set_ambient_reflection(0.25f);
        red_phong.set_diffuse_colour(Colour{1.0f, 0.0f, 0.0f});
        red_phong.set_specular_reflection(0.25f);
        red_phong.set_specular_exponent(50);
        red_phong.set_specular_colour(Colour{1.0f});

        Phong blue_phong;
        blue_phong.set_diffuse_reflection(0.75f);
        blue_phong.set_ambient_reflection(0.4f);
        blue_phong.set_diffuse_colour(Colour{0.0f, 0.0f, 1.0f});
        blue_phong.set_specular_reflection(0.15f);
        blue_phong.set_specular_exponent(100);
        blue_phong.set_specular_colour(Colour{1.0f});

        Matte white_matte;
        white_matte.set_diffuse_reflection(0.97f);
        white_matte.set_ambient_reflection(0.2f);
        white_matte.set_diffuse_colour(Colour{1.0f});

        Phong green_phong;
        green_phong.set_diffuse_reflection(0.5f);
        green_phong.set_ambient_reflection(0.25f);
        green_phong.set_diffuse_colour(Colour{0.0f, 1.0f, 0.0f});
        green_phong.set_specular_reflection(0.15f);
        green_phong.set_specular_exponent(100);
        green_phong.set_specular_colour(Colour{1.0f});

        // Shapes.
        Sphere red_sphere{Point{3.85f, 2.3f, -2.55f}, 2.3f};
        red_sphere.set_material_id(0);
        Sphere blue_sphere{Point{-0.7f, 1.5f, 4.2f}, 2.0f};
        blue_sphere.set_material_id(1);
        Sphere green_sphere{Point{-3.0f, 4.0f, -5.0f}, 4.0f};
        green_sphere.set_material_id(2);
        Plane plane{Point{0.0f}, Vector{0, 1, 0}};
        plane.set_material_id(3);

        // Construct arrays.
        std::array<Lights, 2> lights{ambient, light};
        std::array<Materials, 4> materials{
            red_phong, blue_phong, green_phong, white_matte};
        std::array<Shapes, 4> shapes{
            red_sphere, blue_sphere, green_sphere, plane};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              DefaultBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  DefaultBackground{}};

        Camera camera{Point{7.5f, 4.0f, 10.0f},
                      Vector{-1.0f, 3.7f, 0.0f},
                      Vector{0.0f, -1.0f, 0.0f},
                      340.0f};

        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;
#    else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    // Lights.
    AmbientLight ambient;
    ambient.set_radiance(0.5f);
    ambient.set_colour(Colour{1.0f});

    PointLight light;
    light.set_colour(Colour{1.0f});
    light.set_radiance(2.0f);
    light.set_casts_shadows(true);
    light.set_position(Vector{15, 15, 2.5f});

    // Materials.
    Phong red_phong;
    red_phong.set_diffuse_reflection(0.75f);
    red_phong.set_ambient_reflection(0.25f);
    red_phong.set_diffuse_colour(Colour{1.0f, 0.0f, 0.0f});
    red_phong.set_specular_reflection(0.25f);
    red_phong.set_specular_exponent(50);
    red_phong.set_specular_colour(Colour{1.0f});

    Phong blue_phong;
    blue_phong.set_diffuse_reflection(0.75f);
    blue_phong.set_ambient_reflection(0.4f);
    blue_phong.set_diffuse_colour(Colour{0.0f, 0.0f, 1.0f});
    blue_phong.set_specular_reflection(0.15f);
    blue_phong.set_specular_exponent(100);
    blue_phong.set_specular_colour(Colour{1.0f});

    Matte white_matte;
    white_matte.set_diffuse_reflection(0.97f);
    white_matte.set_ambient_reflection(0.2f);
    white_matte.set_diffuse_colour(Colour{1.0f});

    Phong green_phong;
    green_phong.set_diffuse_reflection(0.5f);
    green_phong.set_ambient_reflection(0.25f);
    green_phong.set_diffuse_colour(Colour{0.0f, 1.0f, 0.0f});
    green_phong.set_specular_reflection(0.15f);
    green_phong.set_specular_exponent(100);
    green_phong.set_specular_colour(Colour{1.0f});

    // Shapes.
    Sphere red_sphere{Point{3.85f, 2.3f, -2.55f}, 2.3f};
    red_sphere.set_material_id(0);
    Sphere blue_sphere{Point{-0.7f, 1.5f, 4.2f}, 2.0f};
    blue_sphere.set_material_id(1);
    Sphere green_sphere{Point{-3.0f, 4.0f, -5.0f}, 4.0f};
    green_sphere.set_material_id(2);
    Plane plane{Point{0.0f}, Vector{0, 1, 0}};
    plane.set_material_id(3);

    // Construct arrays.
    std::array<Lights, 2> lights{ambient, light};
    std::array<Materials, 4> materials{
        red_phong, blue_phong, green_phong, white_matte};
    std::array<Shapes, 4> shapes{red_sphere, blue_sphere, green_sphere, plane};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          DefaultBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              DefaultBackground{}};

    Camera camera{Point{7.5f, 4.0f, 10.0f},
                  Vector{-1.0f, 3.7f, 0.0f},
                  Vector{0.0f, -1.0f, 0.0f},
                  340.0f};

    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#    endif
}
#endif

#if defined(CTRT_RENDER_SCENE_5)
inline auto render_@TILE_NAME@_scene_5()
{
#    if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []() {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;

        // Lights.
        AmbientLight ambient;
        ambient.set_radiance(0.5f);
        ambient.set_colour(Colour{1.0f});

        PointLight light;
        light.set_colour(Colour{1.0f});
        light.set_radiance(2.0f);
        light.set_casts_shadows(true);
        light.set_position(Vector{15, 15, 2.5f});

        // Materials.
        Phong red_phong;
        red_phong.set_diffuse_reflection(0.75f);
        red_phong.set_ambient_reflection(0.25f);
        red_phong.set_diffuse_colour(Colour{1.0f, 0.0f, 0.0f});
        red_phong.set_specular_reflection(0.25f);
        red_phong.set_specular_exponent(50);
        red_phong.set_specular_colour(Colour{1.0f});

        Reflective blue_reflective;
        blue_reflective.set_diffuse_reflection(0.75f);
        blue_reflective.set_ambient_reflection(0.4f);
        blue_reflective.set_diffuse_colour(Colour{0.0f, 0.0f, 1.0f});
        blue_reflective.set_specular_reflection(0.15f);
        blue_reflective.set_specular_exponent(100);
        blue_reflective.set_specular_colour(Colour{1.0f});
        blue_reflective.set_reflection_coeff(0.75f);
        blue_reflective.set_reflection_colour(Colour{1.0f});

        Matte white_matte;
        white_matte.set_diffuse_reflection(0.97f);
        white_matte.set_ambient_reflection(0.2f);
        white_matte.set_diffuse_colour(Colour{1.0f});

        Reflective green_reflective;
        green_reflective.set_diffuse_reflection(0.5f);
        green_reflective.set_ambient_reflection(0.25f);
        green_reflective.set_diffuse_colour(Colour{0.0f, 1.0f, 0.0f});
        green_reflective.set_specular_reflection(0.15f);
        green_reflective.set_specular_exponent(100);
        green_reflective.set_specular_colour(Colour{1.0f});
        green_reflective.set_reflection_coeff(0.75f);
        green_reflective.set_reflection_colour(Colour{1.0f});

        // Shapes.
        Sphere red_sphere{Point{3.85f, 2.3f, -2.55f}, 2.3f};
        red_sphere.set_material_id(0);
        Sphere blue_sphere{Point{-0.7f, 1.5f, 4.2f}, 2.0f};
        blue_sphere.set_material_id(1);
        Sphere green_sphere{Point{-3.0f, 4.0f, -5.0f}, 4.0f};
        green_sphere.set_material_id(2);
        Plane plane{Point{0.0f}, Vector{0, 1, 0}};
        plane.set_material_id(3);

        // Construct arrays.
        std::array<Lights, 2> lights{ambient, light};
        std::array<Materials, 4> materials{
            red_phong, blue_reflective, green_reflective, white_matte};
        std::array<Shapes, 4> shapes{
            red_sphere, blue_sphere, green_sphere, plane};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              DefaultBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  DefaultBackground{}};

        Camera camera{Point{7.5f, 4.0f, 10.0f},
                      Vector{-1.0f, 3.7f, 0.0f},
                      Vector{0.0f, -1.0f, 0.0f},
                      340.0f};

        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;
#    else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    // Lights.
    AmbientLight ambient;
    ambient.set_radiance(0.5f);
    ambient.set_colour(Colour{1.0f});

    PointLight light;
    light.set_colour(Colour{1.0f});
    light.set_radiance(2.0f);
    light.set_casts_shadows(true);
    light.set_position(Vector{15, 15, 2.5f});

    // Materials.
    Phong red_phong;
    red_phong.set_diffuse_reflection(0.75f);
    red_phong.set_ambient_reflection(0.25f);
    red_phong.set_diffuse_colour(Colour{1.0f, 0.0f, 0.0f});
    red_phong.set_specular_reflection(0.25f);
    red_phong.set_specular_exponent(50);
    red_phong.set_specular_colour(Colour{1.0f});

    Reflective blue_reflective;
    blue_reflective.set_diffuse_reflection(0.75f);
    blue_reflective.set_ambient_reflection(0.4f);
    blue_reflective.set_diffuse_colour(Colour{0.0f, 0.0f, 1.0f});
    blue_reflective.set_specular_reflection(0.15f);
    blue_reflective.set_specular_exponent(100);
    blue_reflective.set_specular_colour(Colour{1.0f});
    blue_reflective.set_reflection_coeff(0.75f);
    blue_reflective.set_reflection_colour(Colour{1.0f});

    Matte white_matte;
    white_matte.set_diffuse_reflection(0.97f);
    white_matte.set_ambient_reflection(0.2f);
    white_matte.set_diffuse_colour(Colour{1.0f});

    Reflective green_reflective;
    green_reflective.set_diffuse_reflection(0.5f);
    green_reflective.set_ambient_reflection(0.25f);
    green_reflective.set_diffuse_colour(Colour{0.0f, 1.0f, 0.0f});
    green_reflective.set_specular_reflection(0.15f);
    green_reflective.set_specular_exponent(100);
    green_reflective.set_specular_colour(Colour{1.0f});
    green_reflective.set_reflection_coeff(0.75f);
    green_reflective.set_reflection_colour(Colour{1.0f});

    // Shapes.
    Sphere red_sphere{Point{3.85f, 2.3f, -2.55f}, 2.3f};
    red_sphere.set_material_id(0);
    Sphere blue_sphere{Point{-0.7f, 1.5f, 4.2f}, 2.0f};
    blue_sphere.set_material_id(1);
    Sphere green_sphere{Point{-3.0f, 4.0f, -5.0f}, 4.0f};
    green_sphere.set_material_id(2);
    Plane plane{Point{0.0f}, Vector{0, 1, 0}};
    plane.set_material_id(3);

    // Construct arrays.
    std::array<Lights, 2> lights{ambient, light};
    std::array<Materials, 4> materials{
        red_phong, blue_reflective, green_reflective, white_matte};
    std::array<Shapes, 4> shapes{red_sphere, blue_sphere, green_sphere, plane};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          DefaultBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              DefaultBackground{}};

    Camera camera{Point{7.5f, 4.0f, 10.0f},
                  Vector{-1.0f, 3.7f, 0.0f},
                  Vector{0.0f, -1.0f, 0.0f},
                  340.0f};

    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#    endif
}
#endif

#if defined(CTRT_RENDER_SCENE_6)
inline auto render_@TILE_NAME@_scene_6()
{
#if defined(CTRT_DO_STATIC_RENDER)
    constexpr auto image = []()
    {
        StaticTiledImage<tile_width, tile_height, image_width, image_height>
            image;

        // Lights.
        AmbientLight ambient;
        ambient.set_radiance(0.5f);
        ambient.set_colour(Colour{1.0f});

        PointLight light;
        light.set_colour(Colour{1.0f});
        light.set_radiance(5.0f);
        light.set_casts_shadows(true);
        light.set_position(Vector{0.0f, 20.0f, 20.0f});

        // Materials.
        float ka{0.75f};
        float kd{0.75f};
        float ks{0.1f};
        int e{20};
        float kr{1.0f};

        Reflective pink_reflective;
        pink_reflective.set_diffuse_reflection(kd);
        pink_reflective.set_ambient_reflection(ka);
        pink_reflective.set_diffuse_colour(Colour{0.85f, 0.082f, 0.57f});
        pink_reflective.set_specular_reflection(ks);
        pink_reflective.set_specular_exponent(e);
        pink_reflective.set_specular_colour(Colour{1.0f});
        pink_reflective.set_reflection_coeff(kr);
        pink_reflective.set_reflection_colour(Colour{1.0f});

        Reflective green_reflective;
        green_reflective.set_diffuse_reflection(kd);
        green_reflective.set_ambient_reflection(ka);
        green_reflective.set_diffuse_colour(Colour{0.19f, 0.8f, 0.19f});
        green_reflective.set_specular_reflection(ks);
        green_reflective.set_specular_exponent(e);
        green_reflective.set_specular_colour(Colour{1.0f});
        green_reflective.set_reflection_coeff(kr);
        green_reflective.set_reflection_colour(Colour{1.0f});

        Reflective red_reflective;
        red_reflective.set_diffuse_reflection(kd);
        red_reflective.set_ambient_reflection(ka);
        red_reflective.set_diffuse_colour(Colour{0.86f, 0.07f, 0.23f});
        red_reflective.set_specular_reflection(ks);
        red_reflective.set_specular_exponent(e);
        red_reflective.set_specular_colour(Colour{1.0f});
        red_reflective.set_reflection_coeff(kr);
        red_reflective.set_reflection_colour(Colour{1.0f});

        // Shapes.
        Sphere pink_sphere{Point{0.0f, 1.414f, 0.0f}, 0.866f};
        pink_sphere.set_material_id(0);
        Sphere green_sphere{Point{0.0f, 0.0f, 1.0f}, 0.866f};
        green_sphere.set_material_id(1);
        Sphere red_sphere{Point{0.866f, 0.0f, -0.5f}, 0.866f};
        red_sphere.set_material_id(2);

        // Construct arrays.
        std::array<Lights, 2> lights{ambient, light};
        std::array<Materials, 3> materials{
            pink_reflective, green_reflective, red_reflective};
        std::array<Shapes, 3> shapes{
            pink_sphere, green_sphere, red_sphere};

        Scene<decltype(shapes),
              decltype(lights),
              decltype(materials),
              DefaultBackground>
            scene{std::move(shapes),
                  std::move(lights),
                  std::move(materials),
                  DefaultBackground{}};

        Camera camera{Point{-35.0f, 25.0f, 35.0f},
                      Vector{0.0f, 0.4f, -0.2f},
                      Vector{0.0f, -1.0f, 0.0f},
                      5500.0f};

        scene.set_camera(camera);

        Renderer::render(image, scene, tile);
        return image;
    }();

    return image;
#else
    DynamicTiledImage<tile_width, tile_height, image_width, image_height> image;

    // Lights.
    AmbientLight ambient;
    ambient.set_radiance(0.5f);
    ambient.set_colour(Colour{1.0f});

    PointLight light;
    light.set_colour(Colour{1.0f});
    light.set_radiance(5.0f);
    light.set_casts_shadows(true);
    light.set_position(Vector{0.0f, 20.0f, 20.0f});

    // Materials.
    float ka{0.75f};
    float kd{0.75f};
    float ks{0.1f};
    int e{20};
    float kr{1.0f};

    Reflective pink_reflective;
    pink_reflective.set_diffuse_reflection(kd);
    pink_reflective.set_ambient_reflection(ka);
    pink_reflective.set_diffuse_colour(Colour{0.85f, 0.082f, 0.57f});
    pink_reflective.set_specular_reflection(ks);
    pink_reflective.set_specular_exponent(e);
    pink_reflective.set_specular_colour(Colour{1.0f});
    pink_reflective.set_reflection_coeff(kr);
    pink_reflective.set_reflection_colour(Colour{1.0f});

    Reflective green_reflective;
    green_reflective.set_diffuse_reflection(kd);
    green_reflective.set_ambient_reflection(ka);
    green_reflective.set_diffuse_colour(Colour{0.19f, 0.8f, 0.19f});
    green_reflective.set_specular_reflection(ks);
    green_reflective.set_specular_exponent(e);
    green_reflective.set_specular_colour(Colour{1.0f});
    green_reflective.set_reflection_coeff(kr);
    green_reflective.set_reflection_colour(Colour{1.0f});

    Reflective red_reflective;
    red_reflective.set_diffuse_reflection(kd);
    red_reflective.set_ambient_reflection(ka);
    red_reflective.set_diffuse_colour(Colour{0.86f, 0.07f, 0.23f});
    red_reflective.set_specular_reflection(ks);
    red_reflective.set_specular_exponent(e);
    red_reflective.set_specular_colour(Colour{1.0f});
    red_reflective.set_reflection_coeff(kr);
    red_reflective.set_reflection_colour(Colour{1.0f});

    // Shapes.
    Sphere pink_sphere{Point{0.0f, 1.414f, 0.0f}, 0.866f};
    pink_sphere.set_material_id(0);
    Sphere green_sphere{Point{0.0f, 0.0f, 1.0f}, 0.866f};
    green_sphere.set_material_id(1);
    Sphere red_sphere{Point{0.866f, 0.0f, -0.5f}, 0.866f};
    red_sphere.set_material_id(2);

    // Construct arrays.
    std::array<Lights, 2> lights{ambient, light};
    std::array<Materials, 3> materials{
        pink_reflective, green_reflective, red_reflective};
    std::array<Shapes, 3> shapes{
        pink_sphere, green_sphere, red_sphere};

    Scene<decltype(shapes),
          decltype(lights),
          decltype(materials),
          DefaultBackground>
        scene{std::move(shapes),
              std::move(lights),
              std::move(materials),
              DefaultBackground{}};

    Camera camera{Point{-35.0f, 25.0f, 35.0f},
                  Vector{0.0f, 0.4f, -0.2f},
                  Vector{0.0f, -1.0f, 0.0f},
                  5500.0f};

    scene.set_camera(camera);

    Renderer::render(image, scene, tile);
    return image;
#endif
}
#endif

std::tuple<std::vector<Colour>, Tile> get_@TILE_NAME@()
{
    fmt::print("\nStarting render...\n");
    zeus::Timer<double> timer;
    timer.start();
#if defined(CTRT_RENDER_SCENE_1)
    auto image = render_@TILE_NAME@_scene_1();
#elif defined(CTRT_RENDER_SCENE_2)
    auto image = render_@TILE_NAME@_scene_2();
#elif defined(CTRT_RENDER_SCENE_3)
    auto image = render_@TILE_NAME@_scene_3();
#elif defined(CTRT_RENDER_SCENE_4)
    auto image = render_@TILE_NAME@_scene_4();
#elif defined(CTRT_RENDER_SCENE_5)
    auto image = render_@TILE_NAME@_scene_5();
#elif defined(CTRT_RENDER_SCENE_6)
    auto image = render_@TILE_NAME@_scene_6();
#endif
    fmt::print("Render finished in: {:.2f}ms\n", timer.elapsed());

    auto image_data = image.get_data();
    std::vector<Colour> data(image_data.begin(), image_data.end());

    return {data, tile};
}
