@TILE_INCLUDE_LIST@

#define CTRT_DEFINE_SAVE_IMAGE
#include <tracer/image.hpp>

#include <functional>

using TileFn = std::function<std::tuple<std::vector<Colour>, Tile>()>;

std::vector<TileFn> tile_functions{
    @TILE_GETTER_LIST@
};

static constexpr std::size_t image_width{@IMAGE_WIDTH@};
static constexpr std::size_t image_height{@IMAGE_HEIGHT@};

auto merge_image()
{
    DynamicImage<image_width, image_height> image;
    for (auto const& tile_fn : tile_functions)
    {
        auto[data, tile] = tile_fn();

        for (std::size_t r{0}; r < tile.height; ++r)
        {
            for (std::size_t c{0}; c < tile.width; ++c)
            {
                std::size_t row = tile.x_start + r;
                std::size_t col = tile.y_start + c;
                image(row, col) = data[(r * tile.width) + c];
            }
        }
    }

    return image;
}


int main()
{
    auto image = merge_image();
    save_image("../render_test.jpg", image);

    return 0;
}
